@page "/CreatePost"
@using global::Shared.DTOs
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using System.Drawing
@using HttpClients.ClientInterfaces
@inject IpostInterface postService;
@inject NavigationManager navMgr;
@inject IUserInterface userService;

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Post without assignee.</label>
    }
    else
    {
        <h3>Create Post</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle" @bind:event="oninput"/>
        </div>
        <div class="form-group field">
            <label>Description:</label>
            <textarea @bind="postDesc" @bind:event="oninput"></textarea>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="selectedUserId">
                <option>Choose</option>
                @foreach (User user in users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: @color">@msg</label>
            }
            <button @onclick="Create" disabled="@(string.IsNullOrEmpty(postTitle)|| string.IsNullOrEmpty(postDesc))" class="acceptbtn">Create</button>
        </div>
    }
</div>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string postTitle = "";
    private string postDesc = "";
    private string msg = "";
    private string color = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private Task Create()
    {
        msg = "";

        try
        {
            postService.CreateAsync(new PostCreationDto((int)selectedUserId, postTitle, postDesc));

            msg = "Post successfully created.";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            color = "red";
        }

        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
        }
        if (string.IsNullOrEmpty(postDesc))
        {
            msg = "Description cannot be empty!";
        }
        return Task.FromResult(msg);
    }

}